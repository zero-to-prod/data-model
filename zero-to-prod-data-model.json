{
    "package": {
        "name": "zero-to-prod/data-model",
        "description": "Transforms Data into Type-Safe DTOs.",
        "license": "MIT",
        "type": "library",
        "keywords": [
            "zero-to-prod",
            "DataModel",
            "Dto",
            "data-model",
            "data_model",
            "data model",
            "Data-Model",
            "Data_Model",
            "Data Model"
        ],
        "readme": "./README.md",
        "time": "2024-09-04",
        "authors": [
            {
                "name": "David Smith",
                "email": "dave0016@gmail.com",
                "homepage": "https://davidsmith.blog/",
                "role": "maintainer"
            }
        ],
        "homepage": "https://github.com/zero-to-prod/data-model",
        "support": {
            "email": "dave0016@gmail.com",
            "issues": "https://github.com/zero-to-prod/data-model/issues",
            "source": "https://github.com/zero-to-prod/data-model",
            "docs": "https://zero-to-prod.github.io/data-model/",
            "security": "https://github.com/zero-to-prod/data-model/blob/main/SECURITY.md"
        },
        "funding": [
            {
                "type": "GitHub",
                "url": "https://github.com/sponsors/zero-to-prod"
            }
        ],
        "require": {
            "php": ">=8.1.0"
        },
        "require-dev": {
            "phpunit/phpunit": "^10.0"
        },
        "suggest": {
            "zero-to-prod/data-model-helper": "Helpers for a DataModel.",
            "zero-to-prod/data-model-factory": "Factories for a DataModel.",
            "zero-to-prod/transformable": "Transform a class into different types."
        },
        "autoload": {
            "psr-4": {
                "Zerotoprod\\DataModel\\": "src/"
            }
        },
        "autoload-dev": {
            "psr-4": {
                "Tests\\": "tests/"
            },
            "files": [
                "./tests/functions.php"
            ]
        }
    },
    "files": [
        {
            "name": "src/DataModel.php",
            "content": "<?php\n\nnamespace Zerotoprod\\DataModel;\n\nuse ReflectionAttribute;\nuse ReflectionClass;\nuse ReflectionException;\nuse ReflectionUnionType;\nuse UnitEnum;\n\ntrait DataModel\n{\n    public static function from(array|object|null|string $context = [], mixed $instance = null): self\n    {\n        if ($context instanceof self) {\n            return $context;\n        }\n\n        $self = $instance ?? new self();\n\n        if (is_string($context)) {\n            return $self;\n        }\n\n        $ReflectionClass = new ReflectionClass($self);\n        /** Get Describe Attribute on class. */\n        /** @var ReflectionAttribute|bool $ClassAttribute */\n        $ClassAttribute = current($ReflectionClass->getAttributes(Describe::class));\n        /** @var Describe|null $ClassDescribe */\n        $ClassDescribe = $ClassAttribute ? $ClassAttribute->newInstance() : null;\n        $ClassDescribeArguments = $ClassAttribute ? $ClassAttribute->getArguments() : null;\n\n        $methods = [];\n        foreach ($ReflectionClass->getMethods() as $ReflectionMethod) {\n            $ReflectionAttributes = $ReflectionMethod->getAttributes(Describe::class);\n            foreach ($ReflectionAttributes as $ReflectionAttribute) {\n                $property = $ReflectionAttribute->getArguments()[0];\n                try {\n                    if (!isset($methods[$property])) {\n                        throw new ReflectionException();\n                    }\n                    $filename = $ReflectionClass->getMethod($methods[$property])->getFileName();\n                    $start_line = $ReflectionClass->getMethod($methods[$property])->getStartLine();\n                } catch (ReflectionException) {\n                    $filename = null;\n                    $start_line = null;\n                }\n                $methods[$property] = isset($methods[$property])\n                    ? throw new DuplicateDescribeAttributeException(\n                        sprintf(\n                            \"\\nDuplicate #[Describe($property)] attribute for property $%s found in methods:\\n\".\n                            \"%s() %s:%d\\n\".\n                            \"%s() %s:%d\",\n                            $property,\n                            $methods[$property],\n                            $filename,\n                            $start_line,\n                            $ReflectionMethod->getName(),\n                            $ReflectionMethod->getFileName(),\n                            $ReflectionMethod->getStartLine()\n                        )\n                    )\n                    : $ReflectionMethod->getName();\n            }\n        }\n\n        $propertyAttributes = [];\n        $ReflectionProperties = $ReflectionClass->getProperties();\n        foreach ($ReflectionProperties as $ReflectionProperty) {\n            $propertyAttributes[$ReflectionProperty->getName()] =\n                $ReflectionProperty->getAttributes(Describe::class)[0] ?? null;\n        }\n\n        $context = is_object($context) ? (array)$context : $context ?? [];\n\n        foreach ($ReflectionProperties as $ReflectionProperty) {\n            $Attribute = $propertyAttributes[$ReflectionProperty->getName()];\n            $Describe = $Attribute?->newInstance();\n\n            if (isset($Describe->ignore) && $Describe->ignore) {\n                continue;\n            }\n\n            $context_key = $Describe->from ?? $ReflectionProperty->getName();\n\n            /** Property-level Pre Hook */\n            if (isset($Describe->pre)) {\n                ($Describe->pre)($context[$context_key] ?? null, $context, $Attribute, $ReflectionProperty);\n            }\n\n            $property_name = $ReflectionProperty->getName();\n\n            if (isset($Describe->default) && !isset($context[$context_key])) {\n                $self->{$property_name} = is_callable($Describe->default)\n                    ? ($Describe->default)(null, $context, $Attribute, $ReflectionProperty)\n                    : $Describe->default;\n\n                if (isset($Describe->post)) {\n                    ($Describe->post)($self->{$property_name}, $context, $Attribute, $ReflectionProperty);\n                }\n\n                continue;\n            }\n\n            /** Property-level Cast */\n            if (isset($Describe->cast)) {\n                $self->{$property_name} = ($Describe->cast)($context[$context_key] ?? null, $context, $Attribute, $ReflectionProperty);\n\n                /** Property-level Post Hook */\n                if (isset($Describe->post)) {\n                    ($Describe->post)($self->{$property_name}, $context, $Attribute, $ReflectionProperty);\n                }\n\n                continue;\n            }\n\n            /** Property-level Post Hook */\n            if (isset($Describe->post)) {\n                $self->{$property_name} = $context[$context_key];\n                ($Describe->post)($self->{$property_name}, $context, $Attribute, $ReflectionProperty);\n                continue;\n            }\n\n            /** Method-level Cast */\n            if (isset($methods[$property_name]) && $context) {\n                $self->{$property_name} =\n                    $self->{$methods[$property_name]}($context[$context_key] ?? null, $context, $Attribute, $ReflectionProperty);\n                continue;\n            }\n\n            /** When a property name does not match a key name  */\n            if (!isset($context[$context_key])) {\n                if (isset($Describe->required) && $Describe->required) {\n                    $lineNumber = static function (string $filename, string $property_name): ?int {\n                        foreach (file($filename) as $line_number => $content) {\n                            if (preg_match(\"/\\\\$$property_name/\", $content)) {\n                                return $line_number + 1;\n                            }\n                        }\n\n                        // @codeCoverageIgnoreStart\n                        return null;\n                        // @codeCoverageIgnoreEnd\n                    };\n                    throw new PropertyRequiredException(\n                        sprintf(\n                            \"Property `$%s` is required.\\n%s:%d\",\n                            $property_name,\n                            $ReflectionClass->getFileName(),\n                            $lineNumber($ReflectionClass->getFileName(), $property_name),\n                        )\n                    );\n                }\n                if (isset($Describe->nullable) && $Describe?->nullable) {\n                    $self->{$property_name} = null;\n                    continue;\n                }\n                if (isset($ClassDescribe->nullable) && $ClassDescribe?->nullable) {\n                    $self->{$property_name} = null;\n                    continue;\n                }\n                continue;\n            }\n\n            $ReflectionType = $ReflectionProperty->getType();\n            /** Assigns value when no type or union type is defined. */\n            if (!$ReflectionType || $ReflectionType instanceof ReflectionUnionType) {\n                $self->{$property_name} = $context[$context_key];\n                continue;\n            }\n\n            $property_type = $ReflectionType->getName();\n            if ($property_type === 'self') {\n                $property_type = self::class;\n            }\n            /** Class-level cast  */\n            if ($ClassDescribe?->cast[$property_type] ?? false) {\n                $self->{$property_name} =\n                    $ClassDescribe?->cast[$property_type]($context[$context_key], $context, $ClassDescribeArguments);\n                continue;\n            }\n\n            $via = $Describe->via ?? 'from';\n            $value = $context[$context_key] instanceof UnitEnum\n                ? $context[$context_key]->value\n                : $context[$context_key];\n\n            if (is_callable($via)) {\n                $self->{$property_name} = $via($value);\n                continue;\n            }\n\n            if (is_callable([$property_type, $via]) && method_exists($property_type, $via)) {\n                $self->{$property_name} = $property_type::$via($value);\n                continue;\n            }\n\n            $self->{$property_name} = $context[$context_key];\n        }\n\n        return $self;\n    }\n}\n"
        },
        {
            "name": "src/Describe.php",
            "content": "<?php\n\nnamespace Zerotoprod\\DataModel;\n\nuse Attribute;\n\n/**\n * Pass an associative array to the constructor to describe the behavior of a property when it is resolved.\n *\n * Property example:\n * ```\n * use Zerotoprod\\DataModel\\DataModel;\n * use Zerotoprod\\DataModel\\Describe;\n *\n * class User\n * {\n *     use DataModel;\n *\n *     #[Describe(['cast' => [__CLASS__, 'firstName'], 'required' => true])]\n *     public string $first_name;\n *\n *     #[Describe(['cast' => 'uppercase'])]\n *     public string $last_name;\n *\n *     #[Describe(['cast' => [__CLASS__, 'fullName']])]\n *     public string $full_name;\n *\n *\n *     public static function firstName(mixed $value, array $context): string\n *     {\n *         return strtoupper($value);\n *     }\n *\n *     public static function fullName(null $value, array $context): string\n *     {\n *         return \"{$context['first_name']} {$context['last_name']}\";\n *     }\n * }\n * ```\n * Method example:\n * ```\n * use Zerotoprod\\DataModel\\DataModel;\n * use Zerotoprod\\DataModel\\Describe;\n *\n * class User\n * {\n *     use DataModel;\n *\n *     public string $first_name;\n *     public string $last_name;\n *     public string $fullName;\n *\n *     #[Describe('last_name')]\n *     public function lastName(?string $value, array $context): string\n *     {\n *         return strtoupper($value);\n *     }\n *\n *     #[Describe('fullName')]\n *     public function fullName(null $value, array $context): string\n *     {\n *         return \"{$context['first_name']} {$context['last_name']}\";\n *     }\n * }\n * ```\n * Class example:\n * ```\n * use DateTimeImmutable;\n * use Zerotoprod\\DataModel\\DataModel;\n * use Zerotoprod\\DataModel\\Describe;\n *\n * function uppercase(mixed $value, array $context){\n *      return strtoupper($value);\n * }\n *\n * #[Describe([\n *  'cast' => [\n *      'string' => 'uppercase',\n *      DateTimeImmutable::class => [__CLASS__, 'toDateTimeImmutable'],\n *  ]\n * ])]\n * class User\n * {\n *     use DataModel;\n *\n *     public string $first_name;\n *     public DateTimeImmutable $registered;\n *\n *     public static function toDateTimeImmutable(string $value, array $context): DateTimeImmutable\n *     {\n *         return new DateTimeImmutable($value);\n *     }\n * }\n * ```\n *\n * @link https://github.com/zero-to-prod/data-model\n *\n * @see  https://github.com/zero-to-prod/data-model-helper\n * @see  https://github.com/zero-to-prod/data-model-factory\n * @see  https://github.com/zero-to-prod/transformable\n */\n#[Attribute]\nclass Describe\n{\n    public const missing_as_null = 'missing_as_null';\n    /** @see $from */\n    public const from = 'from';\n    public string $from;\n    /** @see $cast */\n    public const cast = 'cast';\n    public string|array $cast;\n    /** @see $required */\n    public const required = 'required';\n    public bool $required;\n    /** @see $default */\n    public const default = 'default';\n    public $default;\n    /** @see $pre */\n    public const pre = 'pre';\n    public $pre;\n    /** @see $post */\n    public const post = 'post';\n    public $post;\n    /** @see $nullable */\n    public const nullable = 'nullable';\n    public bool $nullable;\n    /** @see $ignore */\n    public const ignore = 'ignore';\n    public bool $ignore;\n    /** @see $via */\n    public const via = 'via';\n    public string|array $via;\n\n    /**\n     *  Pass an associative array to the constructor to describe the behavior of a property when it is resolved.\n     *\n     *  Property example:\n     *  ```\n     *  use Zerotoprod\\DataModel\\DataModel;\n     *  use Zerotoprod\\DataModel\\Describe;\n     *\n     *  class User\n     *  {\n     *      use DataModel;\n     *\n     *      #[Describe(['cast' => [__CLASS__, 'firstName'], 'function' => 'strtoupper'])]\n     *      public string $first_name;\n     *\n     *      #[Describe(['cast' => 'uppercase'])]\n     *      public string $last_name;\n     *\n     *      #[Describe(['cast' => [__CLASS__, 'fullName'], 'required' => true])]\n     *      public string $full_name;\n     *\n     *      private static function firstName(mixed $value, array $context, ?\\ReflectionAttribute $ReflectionAttribute, \\ReflectionProperty $ReflectionProperty): string\n     *      {\n     *          return $ReflectionAttribute->getArguments()[0]['function']($value);\n     *      }\n     *\n     *      public static function fullName(null $value, array $context): string\n     *      {\n     *          return \"{$context['first_name']} {$context['last_name']}\";\n     *      }\n     *  }\n     *  ```\n     *  Method example:\n     *  ```\n     *  use Zerotoprod\\DataModel\\DataModel;\n     *  use Zerotoprod\\DataModel\\Describe;\n     *\n     *  class User\n     *  {\n     *      use DataModel;\n     *\n     *      public string $first_name;\n     *      public string $last_name;\n     *      public string $fullName;\n     *\n     *      #[Describe('last_name')]\n     *      public function lastName(?string $value, array $context): string\n     *      {\n     *          return strtoupper($value);\n     *      }\n     *\n     *      #[Describe('fullName')]\n     *      public function fullName(null $value, array $context): string\n     *      {\n     *          return \"{$context['first_name']} {$context['last_name']}\";\n     *      }\n     *  }\n     *  ```\n     *  Class example:\n     *  ```\n     *  use DateTimeImmutable;\n     *  use Zerotoprod\\DataModel\\DataModel;\n     *  use Zerotoprod\\DataModel\\Describe;\n     *\n     *  function uppercase(mixed $value, array $context){\n     *       return strtoupper($value);\n     *  }\n     *\n     *  #[Describe([\n     *   'cast' => [\n     *       'string' => 'uppercase',\n     *       DateTimeImmutable::class => [__CLASS__, 'toDateTimeImmutable'],\n     *   ]\n     *  ])]\n     *  class User\n     *  {\n     *      use DataModel;\n     *\n     *      public string $first_name;\n     *      public DateTimeImmutable $registered;\n     *\n     *      public static function toDateTimeImmutable(string $value, array $context): DateTimeImmutable\n     *      {\n     *          return new DateTimeImmutable($value);\n     *      }\n     *  }\n     *  ```\n     *\n     * @param  string|array{'from': string,'pre': string|string[], 'cast': string|string[], 'post': string|string[], 'required': bool, 'default': mixed, 'nullable': bool,\n     *                                            'ignore': bool, 'via': string}|null  $attributes\n     *\n     * @link https://github.com/zero-to-prod/data-model\n     *\n     * @see  https://github.com/zero-to-prod/data-model-helper\n     * @see  https://github.com/zero-to-prod/data-model-factory\n     * @see  https://github.com/zero-to-prod/transformable\n     */\n    public function __construct(string|null|array $attributes = null)\n    {\n        if (!is_array($attributes)) {\n            return;\n        }\n\n        foreach ($attributes as $key => $value) {\n            switch ($key) {\n                case self::required:\n                    if (!is_bool($value)) {\n                        throw new InvalidValue('Invalid value: `required` should be a boolean.');\n                    }\n                    $this->required = $value;\n                    break;\n\n                case self::nullable:\n                    if (!is_bool($value)) {\n                        throw new InvalidValue('Invalid value: `nullable` should be a boolean.');\n                    }\n                    $this->nullable = $value;\n                    break;\n\n                case self::ignore:\n                    if (!is_bool($value)) {\n                        throw new InvalidValue('Invalid value: `ignore` should be a boolean.');\n                    }\n                    $this->ignore = $value;\n                    break;\n\n                case self::missing_as_null:\n                    if (!is_bool($value)) {\n                        throw new InvalidValue('Invalid value: `missing_as_null` should be a boolean.');\n                    }\n                    $this->nullable = $value;\n                    break;\n\n                case self::from:\n                    $this->from = $value;\n                    break;\n\n                case self::cast:\n                    $this->cast = $value;\n                    break;\n\n                case self::default:\n                    $this->default = $value;\n                    break;\n\n                case self::pre:\n                    $this->pre = $value;\n                    break;\n\n                case self::post:\n                    $this->post = $value;\n                    break;\n\n                case self::via:\n                    $this->via = $value;\n                    break;\n\n                case 0:\n                    if (is_string($value)) {\n                        switch ($value) {\n                            case self::required:\n                                $this->required = true;\n                                break;\n                            case self::missing_as_null:\n                            case self::nullable:\n                                $this->nullable = true;\n                                break;\n                            case self::ignore:\n                                $this->ignore = true;\n                                break;\n                        }\n                    }\n                    break;\n\n                default:\n                    if ($value === self::missing_as_null) {\n                        $this->nullable = true;\n                    }\n            }\n        }\n    }\n}\n"
        },
        {
            "name": "src/DuplicateDescribeAttributeException.php",
            "content": "<?php\n\nnamespace Zerotoprod\\DataModel;\n\nuse RuntimeException;\n\n/**\n * Thrown when a duplicate Describe attribute references the same property.\n *\n * @link https://github.com/zero-to-prod/data-model\n * @see  https://github.com/zero-to-prod/data-model-helper\n * @see  https://github.com/zero-to-prod/data-model-factory\n * @see  https://github.com/zero-to-prod/transformable\n */\nclass DuplicateDescribeAttributeException extends RuntimeException\n{\n\n}\n"
        },
        {
            "name": "src/InvalidValue.php",
            "content": "<?php\n\nnamespace Zerotoprod\\DataModel;\n\nuse RuntimeException;\n\n/**\n * Thrown when a property is required.\n *\n * @link https://github.com/zero-to-prod/data-model\n * @see  https://github.com/zero-to-prod/data-model-helper\n * @see  https://github.com/zero-to-prod/data-model-factory\n * @see  https://github.com/zero-to-prod/transformable\n */\nclass InvalidValue extends RuntimeException\n{\n\n}\n"
        },
        {
            "name": "src/PropertyRequiredException.php",
            "content": "<?php\n\nnamespace Zerotoprod\\DataModel;\n\nuse RuntimeException;\n\n/**\n * Thrown when a property is required.\n *\n * @link https://github.com/zero-to-prod/data-model\n * @see  https://github.com/zero-to-prod/data-model-helper\n * @see  https://github.com/zero-to-prod/data-model-factory\n * @see  https://github.com/zero-to-prod/transformable\n */\nclass PropertyRequiredException extends RuntimeException\n{\n\n}\n"
        }
    ],
    "readme": {
        "file": "README.md",
        "content": "# Zerotoprod\\DataModel\n\n![](art/logo.png)\n\n[![Repo](https://img.shields.io/badge/github-gray?logo=github)](https://github.com/zero-to-prod/data-model)\n[![GitHub Actions Workflow Status](https://img.shields.io/github/actions/workflow/status/zero-to-prod/data-model/test.yml?label=test)](https://github.com/zero-to-prod/data-model/actions)\n[![GitHub Actions Workflow Status](https://img.shields.io/github/actions/workflow/status/zero-to-prod/data-model/backwards_compatibility.yml?label=backwards_compatibility)](https://github.com/zero-to-prod/data-model/actions)\n[![Packagist Downloads](https://img.shields.io/packagist/dt/zero-to-prod/data-model?color=blue)](https://packagist.org/packages/zero-to-prod/data-model/stats)\n[![php](https://img.shields.io/packagist/php-v/zero-to-prod/data-model.svg?color=purple)](https://packagist.org/packages/zero-to-prod/data-model/stats)\n[![Packagist Version](https://img.shields.io/packagist/v/zero-to-prod/data-model?color=f28d1a)](https://packagist.org/packages/zero-to-prod/data-model)\n[![License](https://img.shields.io/packagist/l/zero-to-prod/data-model?color=pink)](https://github.com/zero-to-prod/data-model/blob/main/LICENSE.md)\n[![wakatime](https://wakatime.com/badge/github/zero-to-prod/data-model.svg)](https://wakatime.com/badge/github/zero-to-prod/data-model)\n[![Hits-of-Code](https://hitsofcode.com/github/zero-to-prod/data-model?branch=main)](https://hitsofcode.com/github/zero-to-prod/data-model/view?branch=main)\n\n## Contents\n\n- [Introduction](#introduction)\n    - [Why Use DataModel?](#why-use-datamodel)\n- [Installation](#installation)\n    - [Additional Packages](#additional-packages)\n- [Features](#features)\n    - [Type-Safe](#recursive-hydration)\n    - [Recursive Instantiation](#recursive-hydration)\n    - [Type Casting](#property-level-cast)\n    - [Life-Cycle Hooks](#life-cycle-hooks)\n    - [Transformations](#transformations)\n    - [Required Properties](#required-properties)\n    - [Default Values](#default-values)\n    - [Nullable Missing Values](#nullable-missing-values)\n    - [Remapping](#re-mapping)\n    - [Ignoring Properties](#ignoring-properties)\n- [How It Works](#how-it-works)\n- [Why It Works](#why-it-works)\n    - [Eliminate Defensive Programming](#eliminate-defensive-programming)\n    - [Increase the Static Analysis Surface](#increase-the-static-analysis-surface)\n    - [Self-Documentation](#self-documentation)\n- [Showcase](#showcase)\n- [Usage](#usage)\n    - [Hydrating from Data](#hydrating-from-data)\n    - [Recursive Hydration](#recursive-hydration)\n- [Transformations](#transformations)\n    - [Describe Attribute](#describe-attribute)\n    - [Order of Precedence](#order-of-precedence)\n    - [Property-Level Cast](#property-level-cast)\n    - [Life-Cycle Hooks](#life-cycle-hooks)\n        - [`pre` Hook](#pre-hook)\n        - [`post` Hook](#post-hook)\n    - [Method-Level Cast](#method-level-cast)\n    - [Union Types](#union-types)\n    - [Class-Level Cast](#class-level-cast)\n- [Required Properties](#required-properties)\n- [Default Values](#default-values)\n    - [Limitations](#limitations)\n- [Nullable Missing Values](#nullable-missing-values)\n    - [Limitations](#limitations-1)\n- [Re-Mapping](#re-mapping)\n- [Ignoring Properties](#ignoring-properties)\n- [Using the Constructor](#using-the-constructor)\n- [Targeting a function to Instantiate a Class](#targeting-a-function-to-instantiate-a-class)\n- [Extending DataModels](#extending-datamodels)\n- [Examples](#examples)\n    - [Hydrating From a Laravel Model](#hydrating-from-a-laravel-model) \n    - [Array of DataModels](#array-of-datamodels)\n    - [Collection of DataModels](#collection-of-datamodels)\n    - [Laravel Validation](#laravel-validation)\n- [Local Development](./LOCAL_DEVELOPMENT.md)\n- [Contributing](#contributing)\n\n## Introduction\n\nA lightweight, trait-based approach to **type-safe** object hydration.\n\nDefine your data resolution logic in one place. No more scattered checks, no\ninheritance hassles—just straightforward, type-safe PHP objects.\n\n**Why you’ll love it**:\n> - **Simplify object hydration** with recursive instantiation\n> - **Enforce type safety** so your objects are always correct\n> - **Reduce boilerplate** by eliminating repetitive validation checks\n> - **Use transformations** with PHP attributes for flexible value resolution\n> - **Stay non-invasive**: just use the `DataModel` trait—no base classes or interfaces required\n\n## Installation\n\nYou can install the package via Composer:\n\n```bash\ncomposer require zero-to-prod/data-model\n```\n\n### Additional Packages\n\n- [DataModelHelper](https://github.com/zero-to-prod/data-model-helper): Helpers for a `DataModel`.\n- [DataModelFactory](https://github.com/zero-to-prod/data-model-factory): A factory helper to set the value of your `DataModel`.\n- [Transformable](https://github.com/zero-to-prod/transformable): Transform a `DataModel` into different types.\n\n### Why Use DataModel?\n\n- **Automated Hydration**: Let the package handle mapping and casting data into your objects.\n- **Type Safety**: PHP enforces your declared property types automatically.\n- **Less Boilerplate**: Centralize your validation and defaults—stop scattering checks all over your code.\n- **Flexible Customization**: Tap into transformations, re-mapping, and lifecycle hooks.\n- **No Overhead**: Use a trait—no extending or complicated class hierarchy.\n\n## Features\n\n- [Type-Safe](#recursive-hydration): Type-safety is enforced by the PHP language itself.\n- [Non-Invasive](#hydrating-from-data): Simply add the `DataModel` trait to a class. No need to extend, implement, or construct.\n- [Recursive Instantiation](#recursive-hydration): Recursively instantiate classes based on their type.\n- [Type Casting](#property-level-cast): Supports primitives, custom classes, enums, and more.\n- [Life-Cycle Hooks](#life-cycle-hooks): Run code before/after property assignment with [pre](#pre-hook) and [post](#post-hook).\n- [Transformations](#transformations): Describe how to resolve a value before instantiation.\n- [Required Properties](#required-properties): Throw an exception when a property is not set.\n- [Default Values](#default-values): Set a default property value.\n- [Nullable Missing Values](#nullable-missing-values): Resolve a missing value as null.\n- [Remapping](#re-mapping): Re-map a key to a property of a different name.\n- [Ignoring Properties](#ignoring-properties): Skip properties as needed\n\n## How It Works\n\nDataModel uses:\n\n- Reflection to find property types\n- PHP attributes (the `#[Describe()]`) to define transformations and rules\n- Recursive Instantiation for nested objects\n- Hooks before and after assignment\n\nJust call `YourClass::from($data)` and let it handle the rest.\n\n## Why it Works\n\nA DataModel removes guesswork by centralizing how values get resolved. You define resolution logic up front, then trust the rest of your code to\noperate with correct, typed data. Less repetition, fewer checks, more clarity.\n\n### Eliminate Defensive Programming\n\nTraditional defensive programming forces you to layer checks everywhere:\n\n- Verbose: sprinkled validations and type checks\n- Error-prone: easy to miss something\n\nWith DataModel, a single #[Describe()] attribute declaration handles it all. This:\n\n- Reduces boilerplate: define once, use everywhere\n- Minimizes risk: fewer places to forget checks\n- Improves clarity: your code focuses on logic, not defensive guardrails\n\n### Increase the Static Analysis Surface\n\nDataModel uses native PHP type mechanics. Language servers and LLMs can:\n\n- Understand your properties and rules\n- Warn on mismatches\n- Optimize code suggestions\n\nThe #[Describe] attribute is explicit, boosting readability and tooling compatibility.\n\n### Self-Documentation\n\nDataModel bakes critical info—types, defaults, transforms—into actual PHP attributes:\n\n- No buried docs or sidecar validations\n- The properties practically document themselves\n- Anyone reading the code sees clearly how data is resolved\n\n## Showcase\n\nProjects that use DataModels:\n\n- [DataModels for OpenAPI 3.0.*](https://github.com/zero-to-prod/data-model-openapi30)\n- [Open Movie Database Api](https://github.com/zero-to-prod/omdb)\n- [DataModels for the Envoyer API.](https://github.com/zero-to-prod/data-model-envoyer)\n\n## Usage\n\nUse the `DataModel` trait in a class.\n\n```php\nclass User\n{\n    use \\Zerotoprod\\DataModel\\DataModel;\n\n    public string $name;\n    public int $age;\n}\n```\n\n### Hydrating from Data\n\nUse the `from` method to instantiate your class, passing an associative array or object.\n\n```php\n$User = User::from([\n    'name' => 'John Doe',\n    'age' => '30',\n]);\necho $User->name; // 'John Doe'\necho $User->age; // 30\n```\n\n### Recursive Hydration\n\nA `DataModel` recursively instantiates classes based on their type declarations.\nIf a property’s type hint is a class, its value is passed to that class’s `from()` method.\n\nIn this example, the `address` element is automatically converted into an `Address` object,\nallowing direct access to its properties: `$User->address->city`.\n\n```php\nclass Address\n{\n    use \\Zerotoprod\\DataModel\\DataModel;\n\n    public string $street;\n    public string $city;\n}\n\nclass User\n{\n    use \\Zerotoprod\\DataModel\\DataModel;\n\n    public string $username;\n    public Address $address;\n}\n\n$User = User::from([\n    'username' => 'John Doe',\n    'address' => [\n        'street' => '123 Main St',\n        'city' => 'Hometown',\n    ],\n]);\n\necho $User->address->city; // Outputs: Hometown\n```\n\n## Transformations\n\nA `DataModel` provides a variety of ways to transform data before the value is assigned to a property.\n\nThe `Describe` attribute provides a declarative way describe how property values are resolved.\n\n### Describe Attribute\n\nResolve a value by adding the `Describe` attribute to a property.\n\nThe `Describe` attribute can accept these arguments.\n\n```php\n#[\\Zerotoprod\\DataModel\\Describe([\n    'ignore' // ignores a property\n    // Re-map a key to a property of a different name\n    'from' => 'key', \n    // Runs before 'cast'\n    'pre' => [MyClass::class, 'preHook']\n    // Targets the static method: `MyClass::methodName()`\n    'cast' => [MyClass::class, 'castMethod'], \n    // 'cast' => 'my_func', // alternately target a function\n    // Runs after 'cast' passing the resolved value as `$value`\n    'post' => [MyClass::class, 'postHook']\n    'default' => 'value',\n    'required', // Throws an exception if the element is missing\n    'nullable', // sets the value to null if the element is missing\n     // The callable to instantiate the class\n     'via' => [MyClass::class, 'staticMethod'] // or 'my_func',\n])]\n```\n\n### Order of Precedence\n\nThere is an order of precedence when resolving a value for a property.\n\n1. [Property-level Cast](#property-level-cast)\n2. [Method-level Cast](#method-level-cast)\n3. [Union Types](#union-types)\n4. [Class-level Casts](#class-level-cast)\n5. Types that have a **concrete** static method `from()`.\n6. Native Types\n\n### Property-Level Cast\n\nThe using the `Describe` attribute directly on the property takes the highest precedence.\n\n```php\nuse Zerotoprod\\DataModel\\Describe;\n\nclass User\n{\n    use \\Zerotoprod\\DataModel\\DataModel;\n\n    #[Describe(['cast' => [self::class, 'firstName'], 'function' => 'strtoupper'])]\n    public string $first_name;\n    \n    #[Describe(['cast' => 'uppercase'])]\n    public string $last_name;\n\n    #[Describe(['cast' => [self::class, 'fullName']])]\n    public string $full_name;\n\n    private static function firstName(mixed $value, array $context, ?\\ReflectionAttribute $ReflectionAttribute, \\ReflectionProperty $ReflectionProperty): string\n    {\n        return $ReflectionAttribute->getArguments()[0]['function']($value);\n    }\n\n    public static function fullName(mixed $value, array $context, ?\\ReflectionAttribute $Attribute, \\ReflectionProperty $Property): string\n    {\n        return \"{$context['first_name']} {$context['last_name']}\";\n    }\n}\n\nfunction uppercase(mixed $value, array $context){\n    return strtoupper($value);\n}\n\n$User = User::from([\n    'first_name' => 'Jane',\n    'last_name' => 'Doe',\n]);\n\n$User->first_name;  // 'JANE'\n$User->last_name;   // 'DOE'\n$User->full_name;   // 'Jane Doe'\n```\n\n#### Life-Cycle Hooks\n\nYou can run methods before and after a value is resolved.\n\n#### `pre` Hook\n\nYou can use `pre` to run a `void` method before the value is resolved.\n\n```php\nuse Zerotoprod\\DataModel\\Describe;\n\nclass BaseClass\n{\n    use \\Zerotoprod\\DataModel\\DataModel;\n\n    #[Describe(['pre' => [self::class, 'pre'], 'message' => 'Value too large.'])]\n    public int $int;\n\n    public static function pre(mixed $value, array $context, ?\\ReflectionAttribute $Attribute, \\ReflectionProperty $Property): void\n    {\n        if ($value > 10) {\n            throw new \\RuntimeException($Attribute->getArguments()[0]['message']);\n        }\n    }\n}\n```\n\n#### `post` Hook\n\nYou can use `post` to run a `void` method after the value is resolved.\n\n```php\nuse Zerotoprod\\DataModel\\Describe;\n\nclass BaseClass\n{\n    use \\Zerotoprod\\DataModel\\DataModel;\n\n    public const int = 'int';\n\n    #[Describe(['post' => [self::class, 'post'], 'message' => 'Value too large.'])]\n    public int $int;\n\n    public static function post(mixed $value, array $context, ?\\ReflectionAttribute $Attribute, \\ReflectionProperty $Property): void\n    {\n        if ($value > 10) {\n            throw new \\RuntimeException($value.$Attribute->getArguments()[0]['message']);\n        }\n    }\n}\n```\n\n### Method-level Cast\n\nUse the `Describe` attribute to resolve values with class methods. Methods receive `$value` and `$context` as parameters.\n\n```php\nuse Zerotoprod\\DataModel\\Describe;\n\nclass User\n{\n    use \\Zerotoprod\\DataModel\\DataModel;\n\n    public string $first_name;\n    public string $last_name;\n    public string $fullName;\n\n    #[Describe('last_name')]\n    public function lastName(mixed $value, array $context, ?\\ReflectionAttribute $Attribute, \\ReflectionProperty $Property): string\n    {\n        return strtoupper($value);\n    }\n\n    #[Describe('fullName')]\n    public function fullName(mixed $value, array $context, ?\\ReflectionAttribute $Attribute, \\ReflectionProperty $Property): string\n    {\n        return \"{$context['first_name']} {$context['last_name']}\";\n    }\n}\n\n$User = User::from([\n    'first_name' => 'Jane',\n    'last_name' => 'Doe',\n]);\n\n$User->first_name;  // 'Jane'\n$User->last_name;   // 'DOE'\n$User->fullName;    // 'Jane Doe'\n```\n\n### Union Types\n\nA value passed to property with a union type is directly assigned to the property.\nIf you wish to resolve the value in a specific way, use a [class method](#method-level-cast).\n\n### Class-Level Cast\n\nYou can define how to resolve different types at the class level.\n\n```php\nuse Zerotoprod\\DataModel\\Describe;\n\nfunction uppercase(mixed $value, array $context){\n    return strtoupper($value);\n}\n\n#[Describe([\n    'cast' => [\n        'string' => 'uppercase',\n        \\DateTimeImmutable::class => [self::class, 'toDateTimeImmutable'],\n    ]\n])]\nclass User\n{\n    use \\Zerotoprod\\DataModel\\DataModel;\n\n    public string $first_name;\n    public DateTimeImmutable $registered;\n\n    public static function toDateTimeImmutable(mixed $value, array $context): DateTimeImmutable\n    {\n        return new DateTimeImmutable($value);\n    }\n}\n\n$User = User::from([\n    'first_name' => 'Jane',\n    'registered' => '2015-10-04 17:24:43.000000',\n]);\n\n$User->first_name;              // 'JANE'\n$User->registered->format('l'); // 'Sunday'\n```\n\n## Required Properties\n\nEnforce that certain properties are required using the Describe attribute:\n\n```php\nuse Zerotoprod\\DataModel\\Describe;\n\nclass User\n{\n    use \\Zerotoprod\\DataModel\\DataModel;\n\n    #[Describe(['required' => true])]\n    public string $username;\n\n    public string $email;\n}\n\nUser::from(['email' => 'john@example.com']);\n// Throws PropertyRequiredException exception: Property: username is required\n```\n\n## Default Values\n\nYou can set a default value for a property like this:\n\n```php\nuse Zerotoprod\\DataModel\\Describe;\n\nclass User\n{\n    use \\Zerotoprod\\DataModel\\DataModel;\n\n    #[Describe(['default' => 'N/A'])]\n    public string $username;\n    \n    #[Describe(['default' => [self::class, 'newCollection']])]\n    public Collection $username;\n    \n    public static function newCollection(): Collection\n    {\n        return new Collection();\n    }\n}\n\n$User = User::from();\n\necho $User->username // 'N/A'\n```\n\n### Limitations\n\nNote that using `null` as a default will not work: `#[Describe(['default' => null])]`.\n\nUse `#[Describe(['nullable' => true])]` or `#[Describe(['nullable'])]` to set a null value.\n\n## Nullable Missing Values\n\nSet missing values to null by setting `['nullable' => true]` or `['nullable']`. This can be placed at the class or property level.\n\nThis prevents an Error when attempting to assess a property that has not been initialized.\n> Error: Typed property User::$age must not be accessed before initialization\n\n```php\nuse Zerotoprod\\DataModel\\Describe;\n\n#[Describe(['nullable' => true])]\nclass User\n{\n    use \\Zerotoprod\\DataModel\\DataModel;\n\n    public ?string $name;\n    \n    #[Describe(['nullable' => true])]\n    public ?int $age;\n}\n\n$User = User::from();\n\necho $User->name; // null\necho $User->age;  // null\n```\n\n### Limitations\n\nNote that using `null` as a default will not work: `#[Describe(['default' => null])]`.\n\nUse `#[Describe(['nullable' => true])]` to set a null value.\n\n## Re-Mapping\n\nYou can map a key to a property of a different name like this:\n\n```php\nuse Zerotoprod\\DataModel\\Describe;\n\nclass User\n{\n    use \\Zerotoprod\\DataModel\\DataModel;\n\n    #[Describe(['from' => 'firstName'])]\n    public string $first_name;\n}\n\n$User = User::from([\n    'firstName' => 'John',\n]);\n\necho $User->first_name; // John\n```\n\n## Ignoring Properties\n\nYou can ignore a property like this:\n\n```php\nuse Zerotoprod\\DataModel\\Describe;\n\nclass User\n{\n    use \\Zerotoprod\\DataModel\\DataModel;\n\n    public string $name;\n\n    #[Describe(['ignore'])]\n    public int $age;\n}\n```\n\n```php\nuse Zerotoprod\\DataModel\\Describe;\n\nclass User\n{\n    use \\Zerotoprod\\DataModel\\DataModel;\n\n    #[Describe(['from' => 'firstName'])]\n    public string $first_name;\n}\n\n$User = User::from([\n    'name' => 'John Doe',\n    'age' => '30',\n]);\n\nisset($User->age); // false\n```\n\n## Using the Constructor\n\nYou can use the constructor to instantiate a DataModel like this:\n\n```php\nclass User\n{\n    use \\Zerotoprod\\DataModel\\DataModel;\n\n    public string $name;\n\n    public function __construct(array $data = [])\n    {\n        self::from($data, $this);\n    }\n}\n\n$User = new User([\n    'name' => 'Jane Doe',\n]);\n\necho $User->name; // 'Jane Doe'; \n```\n\n## Targeting a function to Instantiate a Class\n\nTo resolve naming conflicts or to control how a class is instantiated, use the 'via' key.\n\n```php\nuse Zerotoprod\\DataModel\\Describe;\n\nclass BaseClass\n{\n    use DataModel;\n\n    #[Describe(['via' => 'via'])]\n    public ChildClass $ChildClass;\n\n    #[Describe(['via' => [ChildClass::class, 'via']])]\n    public ChildClass $ChildClass2;\n}\n\nclass ChildClass\n{\n    public function __construct(public int $int)\n    {\n    }\n\n    public static function via(array $context): self\n    {\n        return new self($context[self::int]);\n    }\n}\n\n$BaseClass = BaseClass::from([\n    'ChildClass' => ['int' => 1],\n    'ChildClass2' => ['int' => 1],\n]);\n\n$BaseClass->ChildClass->int;  // 1\n$BaseClass->ChildClass2->int; // 1\n```\n\n## Extending DataModels\n\nYou can extend the capabilities of your DataModels by creating your own DataModel trait.\n\n```php\nnamespace App\\DataModels;\n\ntrait DataModel\n{\n    use \\Zerotoprod\\DataModel\\DataModel;\n\n    public function toArray(): array\n    {\n        return collect($this)->toArray();\n    }\n}\n```\n\n## Examples\n\n### Hydrating from a Laravel Model\n\nYou can hydrate a DataModel from a Laravel model like this:\n\n```php\n$UserDataModel = UserDataModel::from($user->toArray());\n```\n\n### Array of DataModels\n\nThis examples uses the [DataModelHelper](https://github.com/zero-to-prod/data-model-helper).\n\n```bash\ncomposer require zero-to-prod/data-model-helper\n```\n\n```php\nuse Zerotoprod\\DataModel\\Describe;\n\nclass User\n{\n    use \\Zerotoprod\\DataModel\\DataModel;\n    use \\Zerotoprod\\DataModelHelper\\DataModelHelper;\n    \n    /** @var Alias[] $Aliases */\n    #[Describe([\n        'cast' => [self::class, 'mapOf'],   // Use the mapOf helper method\n        'type' => Alias::class,             // Target type for each item\n    ])]\n    public array $Aliases;\n}\n\nclass Alias\n{\n    use \\Zerotoprod\\DataModel\\DataModel;\n    \n    public string $name;\n}\n\n$User = User::from([\n    'Aliases' => [\n        ['name' => 'John Doe'],\n        ['name' => 'John Smith'],\n    ]\n]);\n\necho $User->Aliases[0]->name; // Outputs: John Doe\necho $User->Aliases[1]->name; // Outputs: John Smith\n```\n\n### Collection of DataModels\n\nThis examples uses the [DataModelHelper](https://github.com/zero-to-prod/data-model-helper)\nand [Laravel Collections](https://github.com/illuminate/collections).\n\n```bash\ncomposer require zero-to-prod/data-model-helper\ncomposer require illuminate/collections\n```\n\n```php\nuse Zerotoprod\\DataModel\\Describe;\n\nclass User\n{\n    use \\Zerotoprod\\DataModel\\DataModel;\n    use \\Zerotoprod\\DataModelHelper\\DataModelHelper;\n    \n    /** @var Collection<int, Alias> $Aliases */\n    #[Describe([\n        'cast' => [self::class, 'mapOf'],\n        'type' => Alias::class,\n    ])]\n    public \\Illuminate\\Support\\Collection $Aliases;\n}\n\nclass Alias\n{\n    use \\Zerotoprod\\DataModel\\DataModel;\n    \n    public string $name;\n}\n\n$User = User::from([\n    'Aliases' => [\n        ['name' => 'John Doe'],\n        ['name' => 'John Smith'],\n    ]\n]);\n\necho $User->Aliases->first()->name; // Outputs: John Doe\n```\n\n### Laravel Validation\n\nBy leveraging the `pre` life-cycle hook, you run a validator before a value is resolved.\n\n```php\nuse Illuminate\\Support\\Facades\\Validator;\nuse Zerotoprod\\DataModel\\Describe;\n\nreadonly class FullName\n{\n    use \\Zerotoprod\\DataModel\\DataModel;\n\n    #[Describe([\n        'pre' => [self::class, 'validate'],\n        'rule' => 'min:2'\n    ])]\n    public string $first_name;\n\n    public static function validate(mixed $value, array $context, ?\\ReflectionAttribute $Attribute): void\n    {\n        $validator = Validator::make(['value' => $value], ['value' => $Attribute?->getArguments()[0]['rule']]);\n        if ($validator->fails()) {\n            throw new \\RuntimeException($validator->errors()->toJson());\n        }\n    }\n}\n```\n\n## Contributing\n\nContributions, issues, and feature requests are welcome!\nFeel free to check the [issues](https://github.com/zero-to-prod/data-model/issues) page if you want to contribute.\n\n1. Fork the repository.\n2. Create a new branch (`git checkout -b feature-branch`).\n3. Commit changes (`git commit -m 'Add some feature'`).\n4. Push to the branch (`git push origin feature-branch`).\n5. Create a new Pull Request.\n"
    }
}